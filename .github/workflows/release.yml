name: release

on:
  release:
    types: [published]

env:
  # Define image names
  BACKEND_IMAGE: ${{ github.repository }}
  REGISTRY: ghcr.io


jobs:
  config:
    runs-on: [ubuntu-latest]

    steps:
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.vars.outputs.tag }}
        
      - name: Check output
        run: |
          echo ${{ steps.vars.outputs.tag }}
          echo ${{ steps.vars.outputs.tag }} > version.txt
          
      - name: Upload version file
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-deployment
          path: version.txt

  # Build and push image to Docker registry.
  build:
    # Ensure config job passes before building image.
    needs: config

    runs-on: [ubuntu-latest]

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image version
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

      - name: Check image version
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          echo $IMAGE_TAG
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.vars.outputs.tag }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}

      - 
        name: Copy build files
        run: cp -r ./docker/* ./

      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  ## Generate deployment files.
  generate-artifacts:
    # Ensure django image is built before run testing.
    needs: build

    runs-on: [ubuntu-latest]

    steps:
      - name: Set image version
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}
      
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.vars.outputs.tag }}
          
      - name: Check image version
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          echo $IMAGE_TAG
      - name: Generate deployment files
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
          WWW_DATA_PATH: ${{ secrets.WWW_DATA_PATH }}
          TEST_CODE_PATH: ${{ secrets.TEST_CODE_PATH }}
          PULL_SECRET: ${{ secrets.PULL_SECRET }}
        run: |
          sed -i "s@__IMAGE_BACKEND__@$BACKEND_IMAGE@g" k8s/deployment.backend.yaml
          sed -i "s@__IMAGE_TAG__@$IMAGE_TAG@g" k8s/deployment.backend.yaml
          sed -i "s@__WWW_DATA_PATH__@$WWW_DATA_PATH@g" k8s/deployment.backend.yaml
          sed -i "s@__PULL_SECRET__@$PULL_SECRET@g" k8s/deployment.backend.yaml

          sed -i "s@__IMAGE_BACKEND__@$BACKEND_IMAGE@g" k8s/job.db-migrate.yaml
          sed -i "s@__IMAGE_TAG__@$IMAGE_TAG@g" k8s/job.db-migrate.yaml

          sed -i "s@__CODE_PATH__@$TEST_CODE_PATH@g" k8s/job.test.backend.yaml
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-deployment
          path: |
            k8s/deployment.backend.yaml
            k8s/job.db-migrate.yaml
            k8s/job.test.backend.yaml
            k8s/service.backend.yaml